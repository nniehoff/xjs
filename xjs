#!/usr/bin/env python3
# This file is part of xjs a tool used to disply offline juju status
# Copyright 2019 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 3, as published by the
# Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
# SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.


import json
import sys
from application import Application
import click
from colors import Color
from controller import Controller
from machine import Machine
from model import Model
from prettytable import PrettyTable
import yaml

controllers = {}


def load_status_file(inputfile):
    """Load a juju status file, inputfile is a yaml or json file"""
    rawstatus = {}

    try:
        rawstatus = json.loads(inputfile)
    except Exception:
        try:
            rawstatus = yaml.safe_load(inputfile)
        except Exception:
            print(
                Color.Fg.Red + "Error trying to load status file" + Color.Reset
            )
            sys.exit(1)

    controllername = rawstatus["model"]["controller"]

    # If we already have a controller by the same name use it
    if controllername in controllers:
        controller = controllers[controllername]
    else:
        # Parse the controller info from this status file
        if "controller" in rawstatus:
            controller = Controller(controllername, rawstatus["controller"])
        else:
            controller = Controller(controllername)
        controllers[controllername] = controller

    model = Model(rawstatus["model"], controller)
    if model.name in controller.models:
        print(
            Color.Fg.Red
            + "Error model "
            + model.name
            + " already exists for controller "
            + controllername
            + Color.Reset
        )
        sys.exit(1)
    controller.add_model(model)
    for machname, machinfo in rawstatus["machines"].items():
        machine = Machine(machname, machinfo, model)
        model.add_machine(machine)
    for appname, appinfo in rawstatus["applications"].items():
        application = Application(appname, appinfo, model)
        model.add_application(application)


def console_print_model_info(color=True):
    """Filter and sort model info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    models = []
    for controllername, controller in controllers.items():
        for modelname, model in controller.models.items():
            models.append(model)
    if len(models) > 0:
        console_print_object(print_what=models, color=color)


def console_print_application_info(color=True, hide_scale_zero=False):
    """Filter and sort application info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    # TODO Handle Scale 0
    apps = []
    include_controller_name = False
    include_model_name = False

    if len(controllers) > 1:
        include_controller_name = True
        include_model_name = True
    for controllername, controller in controllers.items():
        if len(controller.models) > 1:
            include_model_name = True
        for modelname, model in controller.models.items():
            for appname, app in model.applications.items():
                if hide_scale_zero and app.get_scale() > 0:
                    apps.append(app)
                elif not hide_scale_zero:
                    apps.append(app)
    if len(apps) > 0:
        console_print_object(
            print_what=apps,
            color=color,
            include_controller_name=include_controller_name,
            include_model_name=include_model_name,
        )


def console_print_unit_info(color=True, hide_subordinate_units=False):
    """Filter and sort unit info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    units = []
    include_controller_name = False
    include_model_name = False

    if len(controllers) > 1:
        include_controller_name = True
        include_model_name = True
    for controllername, controller in controllers.items():
        if len(controller.models) > 1:
            include_model_name = True
        for modelname, model in controller.models.items():
            for appname, application in model.applications.items():
                for unitname, unit in application.units.items():
                    units.append(unit)
                    if not hide_subordinate_units:
                        for subunitname, subunit in unit.subordinates.items():
                            units.append(subunit)
    if len(units) > 0:
        console_print_object(
            print_what=units,
            color=color,
            include_controller_name=include_controller_name,
            include_model_name=include_model_name,
        )


def console_print_networkinterface_info(color=True, include_containers=True):
    """Filter and sort network info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    nics = []
    include_controller_name = False
    include_model_name = False

    if len(controllers) > 1:
        include_controller_name = True
        include_model_name = True
    for controllername, controller in controllers.items():
        if len(controller.models) > 1:
            include_model_name = True
        for modelname, model in controller.models.items():
            for machinename, machine in model.machines.items():
                for nicname, nic in machine.networkinterfaces.items():
                    nics.append(nic)
                if include_containers:
                    for containername, container in machine.containers.items():
                        for (
                            nicname,
                            nic,
                        ) in container.networkinterfaces.items():
                            nics.append(nic)
    if len(nics) > 0:
        console_print_object(
            print_what=nics,
            color=color,
            include_controller_name=include_controller_name,
            include_model_name=include_model_name,
        )


def console_print_machine_info(color=True, include_containers=True):
    """Filter and sort machine info to print in a table here"""
    # TODO Handle Sort
    # TODO Handle Filter
    machines = []
    include_controller_name = False
    include_model_name = False

    if len(controllers) > 1:
        include_controller_name = True
        include_model_name = True
    for controllername, controller in controllers.items():
        if len(controller.models) > 1:
            include_model_name = True
        for modelname, model in controller.models.items():
            for machinename, machine in model.machines.items():
                machines.append(machine)
                if include_containers:
                    for containername, container in machine.containers.items():
                        machines.append(container)
    if len(machines) > 0:
        console_print_object(
            print_what=machines,
            color=color,
            include_controller_name=include_controller_name,
            include_model_name=include_model_name,
        )


# Handle console colors here
def console_print_object(
    print_what,
    color=True,
    include_controller_name=False,
    include_model_name=False,
):
    """Print a table formatted for the console"""
    table = PrettyTable()
    # table.set_style(12)
    table.field_names = print_what[0].get_column_names(
        include_controller_name, include_model_name
    )
    for row in print_what:
        table.add_row(
            row.get_row(color, include_controller_name, include_model_name)
        )
    table.align = "l"
    print(table)


def filter_results(
    ctrl_filter="",
    model_filter="",
    app_filter="",
    unit_filter="",
    machine_filter="",
):
    """Filter the status"""
    global controllers
    filtered_controllers = {}

    # Filter the Controllers
    if ctrl_filter != "":
        filtered_controllers = {
            k: v for (k, v) in controllers.items() if ctrl_filter in k
        }
    else:
        filtered_controllers = controllers

    # Filter the models
    if model_filter != "":
        empty_controllers = []
        for controllername, controller in filtered_controllers.items():
            controller.models = {
                k: v
                for (k, v) in controller.models.items()
                if model_filter in k
            }
            if len(controller.models) == 0:
                empty_controllers.append(controllername)
        for controllername in empty_controllers:
            del filtered_controllers[controllername]

    # Filter the Applications
    # TODO If applications are filtered also need to filter Machines
    if app_filter != "":
        empty_controllers = []
        for controllername, controller in filtered_controllers.items():
            empty_models = []
            for modelname, model in controller.models.items():
                model.applications = {
                    k: v
                    for (k, v) in model.applications.items()
                    if app_filter in k
                }
                if len(model.applications) == 0:
                    empty_models.append(modelname)
            for modelname in empty_models:
                del controller.models[modelname]
            if len(controller.models) == 0:
                empty_controllers.append(controllername)
        for controllername in empty_controllers:
            del filtered_controllers[controllername]

    controllers = filtered_controllers


@click.command()
@click.option(
    "--application",
    default="",
    help="Show only the application with the specified name",
    metavar="<application name>",
)
@click.option(
    "--controller",
    default="",
    help="Show only the controller with the specified name",
    metavar="<controller name>",
)
@click.option(
    "--include-containers",
    "-c",
    default=False,
    is_flag=True,
    help="Include Container information",
)
@click.option(
    "--machine",
    default="",
    help="Show only the machine with the specified name",
    metavar="<machine name>",
)
@click.option(
    "--model",
    default="",
    help="Show only the model with the specified name",
    metavar="<model name>",
)
@click.option(
    "--show-apps",
    "-a",
    default=False,
    is_flag=True,
    help="Show application information",
)
@click.option(
    "--show-model",
    "-d",
    default=False,
    is_flag=True,
    help="Show model information",
)
@click.option(
    "--hide-scale-zero",
    "-h",
    default=False,
    is_flag=True,
    help="Hide applications with a scale of 0",
)
@click.option(
    "--show-machines",
    "-m",
    default=False,
    is_flag=True,
    help="Show machine information",
)
@click.option(
    "--show-net",
    "-n",
    default=False,
    is_flag=True,
    help="Show network interface information",
)
@click.option(
    "--hide-subordinate-units",
    "-s",
    default=False,
    is_flag=True,
    help="Hide subordinate units",
)
@click.option(
    "--show-units",
    "-u",
    default=False,
    is_flag=True,
    help="Show unit information",
)
@click.option(
    "--no-color", default=False, is_flag=True, help="Remove color from output"
)
@click.option(
    "--offline",
    default=False,
    is_flag=True,
    help="Don't query jujucharms.com for version information",
)
@click.option(
    "--unit",
    default="",
    help="Show only the unit with the specified name",
    metavar="<unit name>",
)
@click.argument(
    "statusfiles",
    required=True,
    type=click.File("r"),
    nargs=-1,
    metavar="<status files>",
)
def main(
    statusfiles,
    hide_scale_zero,
    hide_subordinate_units,
    show_apps,
    show_units,
    show_machines,
    show_net,
    show_model,
    include_containers,
    offline,
    no_color,
    controller,
    application,
    unit,
    model,
    machine,
):
    """
    xjs parses a juju status yaml/json and displays the information
    in a user friendly form highlighting specific fields of specific
    interest.
    """

    color = not no_color
    for statusfile in statusfiles:
        load_status_file(statusfile)

    # If no particular field was specified, show them all
    if (
        not show_apps
        and not show_units
        and not show_machines
        and not show_net
        and not show_model
        and not include_containers
    ):
        show_apps = True
        show_units = True
        show_machines = True
        show_net = True
        show_model = True
        include_containers = True

    if (
        controller != ""
        or model != ""
        or application != ""
        or unit != ""
        or machine != ""
    ):
        filter_results(
            ctrl_filter=controller,
            model_filter=model,
            app_filter=application,
            unit_filter=unit,
            machine_filter=machine,
        )

    if not offline and show_apps:
        for controller in controllers:
            controllers[controller].update_app_version_info()

    if show_model:
        console_print_model_info(color)
        print("")
    if show_apps:
        console_print_application_info(color, hide_scale_zero)
        print("")
    if show_units:
        console_print_unit_info(color, hide_subordinate_units)
        print("")
    if show_machines:
        console_print_machine_info(color, include_containers)
        print("")
    if show_net:
        console_print_networkinterface_info(color, include_containers)
        print("")


if __name__ == "__main__":
    main()
